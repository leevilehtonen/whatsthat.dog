{"version":3,"sources":["components/NavMenu.js","components/Header.js","components/Body.js","components/Footer.js","components/CropWindow.js","components/ResultWindow.js","services/AI.js","components/PredictModal.js","components/Notification.js","pages/Index.js","pages/About.js","App.js","serviceWorker.js","index.js"],"names":["NavMenu","_ref","isOpen","react_default","a","createElement","className","href","react_router_dom","to","activeClassName","Header","_useState","useState","_useState2","Object","slicedToArray","open","setOpen","onClick","components_NavMenu","Body","children","Footer","CropWindow","src","setCanvas","crop","setCrop","_useState3","_useState4","imageRef","setImageRef","makeClientCrop","_ref2","asyncToGenerator","regenerator_default","mark","_callee","croppedCanvas","wrap","_context","prev","next","width","height","getCroppedCanvas","stop","_x","apply","this","arguments","image","canvas","document","scaleX","naturalWidth","scaleY","naturalHeight","getContext","drawImage","x","y","ReactCrop_default","onChange","newCrop","onImageLoaded","getDefaultCanvas","onComplete","duplicateCanvas","newCanvas","cloneNode","ResultWindow","predictResult","canvasContainerRefDesktop","useRef","canvasContainerRefMobile","canvasDesktop","canvasMobile","useEffect","current","hasChildNodes","replaceChild","firstChild","appendChild","max","lib","animationIn","animationOut","isVisible","animationInDuration","ref","es6","data","slice","layout","margin","top","right","left","bottom","dataKey","type","value","offset","position","stroke","fill","init","model","warmupResult","tf","sent","predict","dispose","abrupt","preprocess","tensor","fromPixels","resized","resizeBilinear","normalized","classify","input","batchSize","arraySync","map","val","i","Breed","categories","Probability","index","sort","b","PredictModal","onCancelClick","modalState","setModalState","_useState5","_useState6","setPredictResult","onPredictClick","_callee2","classifyData","_classifyData","_context2","result","components_CropWindow","components_ResultWindow","Notification","text","visible","setVisible","animationOutDuration","Index","setSrc","setModel","_useState7","_useState8","notification","setNotification","initMLmodel","loadedModel","Promise","res","rej","setTimeout","t0","onSelectFile","e","loadCanvas","createUrl","event","loadImage","target","files","img","orientation","toBlob","blob","URL","createObjectURL","getElementsByClassName","name","index_es","icon","components_PredictModal","components_Notification","About","class","App","library","add","faUpload","faChevronLeft","components_Header","components_Body","react_router","path","exact","component","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f14f05dd.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom'\n\n\nconst NavMenu = ({ isOpen }) => (\n  <div className={\"navbar-menu \" + (isOpen ? \"is-active\" : \"\")}>\n    <div className=\"navbar-end\">\n      <a className=\"navbar-item\" href=\"https://www.github.com/leevilehtonen/whatsthat.dog\">\n        Project\n      </a>\n      <NavLink to=\"/about\" className=\"navbar-item\" activeClassName=\"is-active\">About</NavLink>\n    </div>\n  </div>\n)\n\n\nexport default NavMenu;\n\n","import React from 'react';\n\nimport { useState } from \"react\";\nimport NavMenu from \"./NavMenu\";\n\nconst Header = () => {\n  const [open, setOpen] = useState(false);\n\n  return (\n    <nav className={\"navbar animated slideInDown faster\"}>\n      <div className={\"container\"}>\n        <div className=\"navbar-brand\">\n          <span\n            className={\"navbar-burger burger \" + (open ? \"is-active\" : \"\")}\n            onClick={() => setOpen(!open)}\n          >\n            <span />\n            <span />\n            <span />\n          </span>\n        </div>\n        <NavMenu isOpen={open} />\n      </div>\n    </nav>\n  );\n};\n\nexport default Header;\n","import React from 'react';\n\nconst Body = ({ children }) => <div className=\"hero-body\">{children}</div>;\n\nexport default Body;\n","import React from \"react\";\n\nconst Footer = () => (\n  <footer className=\"hero-foot footer has-text-centered\">\n    <p>© Leevi Lehtonen 2019</p>\n  </footer>\n);\n\nexport default Footer;\n\n//      <p>© Leevi Lehtonen 2019</p>\n","import React, { useState } from 'react'\nimport ReactCrop from \"react-image-crop\";\n\nconst getDefaultCanvas = (image) => {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = image.width;\n    canvas.height = image.height;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.drawImage(image, 0, 0, image.width, image.height)\n    return canvas;\n}\n\nconst CropWindow = ({ src, setCanvas }) => {\n    const [crop, setCrop] = useState({})\n    const [imageRef, setImageRef] = useState(null)\n\n\n    const onImageLoaded = (image) => {\n        setImageRef(image)\n        setCanvas(getDefaultCanvas(image))\n    };\n\n    const onCropComplete = crop => {\n        makeClientCrop(crop);\n    };\n\n    const onCropChange = newCrop => {\n        setCrop(newCrop);\n    };\n\n    const makeClientCrop = async (crop) => {\n        if (imageRef && crop.width && crop.height) {\n            const croppedCanvas = getCroppedCanvas(imageRef, crop);\n            setCanvas(croppedCanvas);\n        }\n    }\n\n    const getCroppedCanvas = (image, crop) => {\n        const canvas = document.createElement(\"canvas\");\n        const scaleX = image.naturalWidth / image.width;\n        const scaleY = image.naturalHeight / image.height;\n        canvas.width = crop.width;\n        canvas.height = crop.height;\n        const ctx = canvas.getContext(\"2d\");\n\n        ctx.drawImage(\n            image,\n            crop.x * scaleX,\n            crop.y * scaleY,\n            crop.width * scaleX,\n            crop.height * scaleY,\n            0,\n            0,\n            crop.width,\n            crop.height\n        )\n        return canvas;\n    }\n\n\n\n    return (\n        <div className=\"cropwindow\">\n            {src && <ReactCrop src={src} crop={crop} onChange={onCropChange} onImageLoaded={onImageLoaded}\n                onComplete={onCropComplete} />}\n        </div>\n    )\n}\n\nexport default CropWindow;","import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  BarChart,\n  Bar,\n  XAxis,\n  YAxis,\n  Tooltip,\n  ResponsiveContainer,\n  Label\n} from \"recharts\";\nimport { Animated } from \"react-animated-css\";\n\nconst duplicateCanvas = canvas => {\n  const newCanvas = canvas.cloneNode();\n  newCanvas.getContext(\"2d\").drawImage(canvas, 0, 0);\n  return newCanvas;\n};\n\nconst ResultWindow = ({ canvas, predictResult }) => {\n  const canvasContainerRefDesktop = useRef(null);\n  const canvasContainerRefMobile = useRef(null);\n  const [canvasDesktop] = useState(duplicateCanvas(canvas));\n  const [canvasMobile] = useState(duplicateCanvas(canvas));\n\n  useEffect(() => {\n    if (canvasContainerRefMobile.current.hasChildNodes()) {\n      canvasContainerRefMobile.current.replaceChild(\n        canvasMobile,\n        canvasContainerRefMobile.current.firstChild\n      );\n    } else {\n      canvasContainerRefMobile.current.appendChild(canvasMobile);\n    }\n    if (canvasContainerRefDesktop.current.hasChildNodes()) {\n      canvasContainerRefDesktop.current.replaceChild(\n        canvasDesktop,\n        canvasContainerRefDesktop.current.firstChild\n      );\n    } else {\n      canvasContainerRefDesktop.current.appendChild(canvasDesktop);\n    }\n  }, [canvasMobile, canvasDesktop]);\n\n  // flex\n  return (\n    <div className=\"resultwindow\">\n      {!predictResult && (\n        <progress className=\"progress is-small is-dark\" max=\"100\" />\n      )}\n      <div className=\"columns is-gapless is-hidden-touch\">\n        <Animated\n          animationIn=\"fadeIn\"\n          animationOut=\"fadeOut\"\n          isVisible={true}\n          animationInDuration={500}\n          className=\"column\"\n        >\n          <div\n            className=\"resultwindow-canvas\"\n            ref={canvasContainerRefDesktop}\n          />\n        </Animated>\n\n        <Animated\n          animationIn=\"fadeInLeft\"\n          animationOut=\"fadeOutLeft\"\n          isVisible={predictResult ? true : false}\n          animationInDuration={500}\n          className=\"column\"\n        >\n          <ResponsiveContainer width={canvasDesktop.width} height=\"100%\">\n            <BarChart\n              data={predictResult.slice(0, 5)}\n              layout=\"vertical\"\n              margin={{ top: 20, right: 20, left: 40, bottom: 20 }}\n            >\n              <YAxis dataKey=\"Breed\" type=\"category\" />\n              <XAxis type=\"number\">\n                <Label\n                  value=\"Probability\"\n                  offset={-10}\n                  position=\"insideBottom\"\n                />\n              </XAxis>\n              <Tooltip />\n              <Bar dataKey=\"Probability\" stroke=\"#2f0010\" fill=\"#8a5060\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </Animated>\n      </div>\n      <div className=\"is-hidden-desktop\">\n        <Animated\n          animationIn=\"fadeIn\"\n          animationOut=\"fadeOut\"\n          isVisible={true}\n          animationInDuration={500}\n        >\n          <div className=\"resultwindow-canvas\" ref={canvasContainerRefMobile} />\n        </Animated>\n        <Animated\n          animationIn=\"fadeIn\"\n          animationOut=\"fadeOut\"\n          isVisible={predictResult ? true : false}\n          animationInDuration={500}\n        >\n          <ResponsiveContainer width={canvasMobile.width} height={400}>\n            <BarChart\n              data={predictResult.slice(0, 5)}\n              layout=\"vertical\"\n              margin={{ top: 20, right: 20, left: 40, bottom: 20 }}\n            >\n              <YAxis dataKey=\"Breed\" type=\"category\" />\n              <XAxis type=\"number\">\n                <Label\n                  value=\"Probability\"\n                  offset={-10}\n                  position=\"insideBottom\"\n                />\n              </XAxis>\n              <Tooltip />\n              <Bar dataKey=\"Probability\" stroke=\"#2f0010\" fill=\"#8a5060\" />\n            </BarChart>\n          </ResponsiveContainer>\n        </Animated>\n      </div>\n    </div>\n  );\n};\n\nexport default ResultWindow;\n\n/*\n<ResponsiveContainer width={canvas.width} height=\"100%\">\n                    <BarChart data={predictResult.slice(0, 5)}>\n                        <XAxis dataKey=\"breed\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Bar dataKey=\"prob\" fill=\"#8884d8\" label={{ position: 'top' }} />\n                    </BarChart>\n                </ResponsiveContainer>\n{predictResult &&\n    <div className=\"column\">\n        {predictResult.slice(0, 5).map((item) => <p>{item.breed}: {item.prob}</p>)}\n    </div>}\n\n    */\n","import * as tf from \"@tensorflow/tfjs\"\nimport categories from \"../category_names.json\"\n\n\nexport const init = async () => {\n    const model = await tf.loadGraphModel(\"https://s3-eu-west-1.amazonaws.com/ai-data-storage/serve/model51205/model.json\")\n    const warmupResult = model.predict(tf.zeros([1, 224, 224, 3]));\n    await warmupResult.data();\n    warmupResult.dispose();\n    return model;\n}\n\nexport const preprocess = (canvas) => {\n    const tensor = tf.browser.fromPixels(canvas)\n    const resized = tf.image.resizeBilinear(tensor, [224, 224])\n    const normalized = tf.div(resized, tf.scalar(255.0))\n    const reshaped = tf.reshape(normalized, [-1, 224, 224, 3])\n    return reshaped;\n}\n\nexport const classify = (model, input) => {\n    const output = model.predict(input, { batchSize: 1 })\n    const outputdata = output.arraySync();\n    const response = outputdata[0].map((val, i) => ({ Breed: categories[i], Probability: val, index: i }))\n    const sorted_response = response.sort((a, b) => b.Probability - a.Probability)\n    return sorted_response\n}\n\n\n\n\n\n","import React, { useState, useEffect } from \"react\"\nimport { Animated } from \"react-animated-css\";\nimport CropWindow from \"./CropWindow\"\nimport ResultWindow from \"./ResultWindow\"\nimport { preprocess, classify } from \"../services/AI\"\n\n\n\nconst PredictModal = ({ open, onCancelClick, src, model }) => {\n    const [canvas, setCanvas] = useState(null)\n    const [modalState, setModalState] = useState(\"CROP\")\n    const [predictResult, setPredictResult] = useState(null)\n\n\n    const onPredictClick = async () => {\n        setModalState(\"RESULT\")\n        async function classifyData() {\n            const result = classify(model, preprocess(canvas));\n            setPredictResult(result)\n        }\n        classifyData();\n    }\n\n    return (\n        <Animated animationIn=\"fadeIn\" animationOut=\"fadeOut\" isVisible={open}>\n            <div className={\"modal animated is-active\"}>\n                <div className=\"modal-background\" onClick={() => onCancelClick()}></div>\n                <div className=\"modal-card\">\n                    <header className=\"modal-card-head\">\n                        <p className=\"modal-card-title\">{modalState === \"CROP\" ? \"Crop image\" : \"Prediction results\"}</p>\n                    </header>\n                    <section className=\"modal-card-body\">\n                        {modalState === \"CROP\" && <CropWindow src={src} setCanvas={setCanvas} />}\n                        {modalState === \"RESULT\" && <ResultWindow canvas={canvas} predictResult={predictResult} />}\n                    </section>\n                    <footer className=\"modal-card-foot\">\n                        {modalState === \"CROP\" && <button className={\"button is-inverted \" + (model === null ? \"is-loading\" : \"\")} onClick={() => onPredictClick()}>Predict</button>}\n                        <button className=\"button is-primary\" onClick={() => onCancelClick()}>{modalState === \"CROP\" ? \"Cancel\" : \"Finish\"}</button>\n                    </footer>\n                </div>\n            </div>\n        </Animated>\n\n    )\n}\n\nexport default PredictModal;\n\n","import React from 'react';\nimport { Animated } from \"react-animated-css\";\n\nconst Notification = ({ text, type, visible, setVisible }) => {\n\n\n\n    return (\n        <Animated animationIn=\"fadeInUp\" animationOut=\"fadeOut\" animationInDuration={500} animationOutDuration={500} isVisible={visible} className=\"notification-container\">\n            <div className={\"notification \" + type}>\n                <button className=\"delete\" onClick={() => setVisible(false)}></button>\n                <p className={\"is-size-5 \" + (type === \"is-danger\" ? \"\" : \"has-text-black\")}>{text}</p>\n            </div>\n        </Animated>\n    )\n}\n\nexport default Notification","import React, { useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { Animated } from \"react-animated-css\";\nimport loadImage from \"blueimp-load-image\";\nimport PredictModal from \"../components/PredictModal\";\nimport { init } from \"../services/AI\";\nimport Notification from \"../components/Notification\";\n\nconst Index = () => {\n  const [open, setOpen] = useState(false);\n  const [src, setSrc] = useState(null);\n  const [model, setModel] = useState(null);\n  const [notification, setNotification] = useState({\n    visible: false,\n    text: \"\",\n    type: \"is-white\"\n  });\n\n  const initMLmodel = async () => {\n    if (model === null) {\n      try {\n        setNotification({\n          visible: true,\n          text:\n            \"Initializing AI model in background. First time might take time.\",\n          type: \"is-white\"\n        });\n        await new Promise((res, rej) => setTimeout(() => res(), 500));\n        const loadedModel = await init();\n        setNotification({ visible: false });\n        setModel(loadedModel);\n        setTimeout(\n          () =>\n            setNotification({\n              visible: true,\n              text: \"AI model was successfully loaded.\",\n              type: \"is-success\"\n            }),\n          500\n        );\n        setTimeout(() => setNotification({ visible: false }), 3000);\n      } catch (error) {\n        setNotification({\n          visible: true,\n          text:\n            \"Error fetching model from server. Try clearing cache and hard reloading the website. Please also check that your connection is up and running.\",\n          type: \"is-danger\"\n        });\n      }\n    }\n  };\n\n  const onSelectFile = async e => {\n    const loadCanvas = event =>\n      new Promise((res, rej) => {\n        loadImage(event.target.files[0], img => res(img), {\n          orientation: true\n        });\n        event.target.value = \"\";\n      });\n    const createUrl = canvas =>\n      new Promise((res, rej) => {\n        canvas.toBlob(blob => {\n          res(URL.createObjectURL(blob));\n        }, \"image/jpeg\");\n      });\n\n    const canvas = await loadCanvas(e);\n    document\n      .getElementsByClassName(\"subtitle is-spaced is-4\")[0]\n      .appendChild(canvas);\n\n    const src = await createUrl(canvas);\n\n    setSrc(src);\n    setOpen(true);\n  };\n\n  const onCancelClick = () => {\n    setOpen(false);\n    setSrc(null);\n  };\n\n  return (\n    <div className=\"container page\">\n      <Animated animationIn=\"fadeIn\">\n        <h1 className=\"title is-spaced\">What's that dog?</h1>\n        <h2 className=\"subtitle is-spaced is-4\">\n          Did you run into some cool dog and you want now to find out which\n          breed it was? Let this AI powered web application help you to find\n          out. All you have to do is load a picture of the cool dog and the AI\n          will do the rest.\n        </h2>\n        <div className=\"file is-boxed is-white\">\n          <label className=\"file-label\">\n            <input\n              className=\"file-input\"\n              type=\"file\"\n              name=\"dog\"\n              onChange={onSelectFile}\n              onClick={() => initMLmodel()}\n            />\n            <span className=\"file-cta\">\n              <span className=\"file-icon\">\n                <FontAwesomeIcon icon=\"upload\" />\n              </span>\n              <span className=\"file-label is-size-4\">\n                Choose an image file...\n              </span>\n            </span>\n          </label>\n        </div>\n      </Animated>\n      {src && (\n        <PredictModal\n          open={open}\n          src={src}\n          model={model}\n          onCancelClick={onCancelClick}\n          setNotification={setNotification}\n        />\n      )}\n      {notification.visible && (\n        <Notification\n          text={notification.text}\n          type={notification.type}\n          visible={notification.visible}\n          setVisible={() => setNotification({ visible: false })}\n        />\n      )}\n    </div>\n  );\n};\n\nexport default Index;\n","import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title is-spaced\">whatsthat.dog</h1>\n      <h2 className=\"subtitle is-spaced is-4\">\n        Whatsthat.dog is a small hobby POC kind of project to keep deep learning\n        skills up to date and also to explore running a machine learning model\n        in a browser environment with Tensorflow JavaScript. Please do\n        contribute if you are interested by making a pull request to GitHub, and\n        contact me if you have any questions.\n      </h2>\n      <div className=\"buttons\">\n        <NavLink to=\"/\" className=\"button is-large\" activeClassName=\"is-active\">\n          <span class=\"icon\">\n            <FontAwesomeIcon icon=\"chevron-left\" />\n          </span>\n          <span> Back to app</span>\n        </NavLink>\n      </div>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport Body from \"./components/Body\";\nimport Footer from \"./components/Footer\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport Index from \"./pages/Index\";\nimport About from \"./pages/About\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faUpload, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\n\nconst App = () => {\n  library.add(faUpload, faChevronLeft);\n  return (\n    <div className=\"App\">\n      <Router>\n        <Header />\n\n        <section className=\"hero is-fullheight-with-navbar\">\n          <Body>\n            <Route path=\"/\" exact component={Index} />\n            <Route path=\"/about\" component={About} />\n          </Body>\n          <Footer />\n        </section>\n      </Router>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}